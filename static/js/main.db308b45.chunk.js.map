{"version":3,"sources":["../node_modules/peerjs/dist sync","components/PeerjsPage.tsx","components/NginxSslPage.tsx","components/HomePage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","PeerjsPage","useState","JSON","stringify","host","port","path","secure","config","iceServers","urls","sdpSemantics","optionsString","setOptionsString","peer","setPeer","peerId","setPeerId","connectId","setConnectId","received","setReceived","connected","setConnected","conn","setConn","text","setText","Container","rows","cols","value","onChange","target","onClick","destroyed","destroy","peer1","Peer","parse","on","console","error","d","connect","send","reverse","map","s","k","template","subdomain","portOrPath","test","processPortOrPath","NginxSslPage","setSubdomain","setPortOrPath","style","overflowY","Typography","variant","Link","href","TextField","label","HomePage","to","component","darkTheme","createMuiTheme","palette","type","lightTheme","App","useMediaQuery","isDarkMode","setIsDarkMode","theme","CssBaseline","Box","flexDirection","position","top","left","right","bottom","display","AppBar","Toolbar","justifyContent","ButtonGroup","color","Button","title","Brightness7","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db308b45.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 76;","import { useState } from 'react'\nimport Peer from 'peerjs'\nimport { Container } from '@material-ui/core'\n\nfunction PeerjsPage() {\n  const [optionsString, setOptionsString] = useState(() => JSON.stringify({\n    host: '0.peerjs.com',\n    port: 443,\n    path: '/',\n    secure: true,\n    config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }], sdpSemantics: 'unified-plan' }\n  }, null, 2))\n\n  const [peer, setPeer] = useState<Peer|null>(null)\n  const [peerId, setPeerId] = useState('')\n  const [connectId, setConnectId] = useState('')\n  const [received, setReceived] = useState<string[]>([])\n  const [connected, setConnected] = useState(false)\n  const [conn, setConn] = useState<Peer.DataConnection|null>(null)\n  const [text, setText] = useState('')\n\n  const newPeer = () => {\n    if(peer && !peer.destroyed) {\n      peer.destroy()\n    }\n    const peer1 = new Peer(JSON.parse(optionsString))\n    setPeer(peer1)\n    peer1.on('open', () => {\n      setPeerId(peer1.id)\n    })\n    peer1.on('error',console.error)\n    peer1.on('connection', conn => {\n      setConn(conn)\n      conn.on('open', () => setConnected(true))\n      conn.on('data', d => setReceived([...received, d]))\n      conn.on('close', () => setConnected(false))\n      conn.on('error',console.error)\n    })\n  }\n\n  const connect = () => {\n    if(peer) {\n      const conn = peer.connect(connectId)\n      conn.on('open', () => setConnected(true))\n      conn.on('data', d => setReceived([...received, d]))\n      conn.on('close', () => setConnected(false))\n      conn.on('error',console.error)\n      setConn(conn)\n    }\n  }\n\n  const send = () => {\n    if(peer && conn && connected) {\n      conn.send(text)\n      setText('')\n    }\n  }\n\n  return (\n    <Container>\n      <h1>PeerJS Playground</h1>\n      <label>\n        <div>Option JSON</div>\n        <textarea rows={20} cols={100} value={optionsString} onChange={({ target }) => setOptionsString(target.value)}/>\n      </label>\n      <div>\n        <button onClick={newPeer}>new Peer()</button>\n        current peerId {peerId}\n      </div>\n      <div>\n        <input value={connectId} onChange={({target}) => setConnectId(target.value)}/> <button onClick={connect}>connect</button>\n      </div>\n      <div>connected: {connected ? 'true' : 'false'}</div>\n      <div><input value={text} onChange={({target}) => setText(target.value)}/><button onClick={send}>send</button></div>\n      <div>\n        {received.reverse().map((s, k) => <div key={k}>{s}</div>)}\n      </div>\n    </Container>\n  )\n}\n\nexport default PeerjsPage\n","import { Container, Link, TextField, Typography } from '@material-ui/core'\nimport { useState } from 'react'\n\nconst processPortOrPath = (portOrPath: string) => {\n  if (/^\\d+$/.test(portOrPath)) {\n    return `\n  location / {\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_pass http://localhost:${portOrPath}/;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n  }`\n  } else {\n    return `\n  root ${portOrPath}\n\n  location / {\n      try_files $uri $uri/ =404\n  }`\n  }\n}\n\nconst template = (subdomain: string, portOrPath: string) => {\n  return `\\\nserver {\n  if ($host = ${subdomain}) {\n    return 301 https://$host$request_uri;\n  }\n  listen 80;\n  listen [::]:80;\n  server_name ${subdomain};\n  return 301 https://$host$request_uri;\n}\n\nserver {\n  ssl on;\n  ssl_certificate /etc/letsencrypt/live/${subdomain}/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/${subdomain}/privkey.pem;\n  listen 443 ssl;\n  listen [::]:443 ssl;\n  server_name ${subdomain};\n${processPortOrPath(portOrPath)}\n}\n  `\n}\n\nconst NginxSslPage = () => {\n  const [subdomain, setSubdomain] = useState('www.dipsy.me')\n  const [portOrPath, setPortOrPath] = useState('3000')\n  return (\n    <Container style={{ overflowY: 'auto' }}>\n      <Typography variant=\"h3\">Nginx subdomain SSL config generation</Typography>\n      <Typography>This util is to generate nginx ssl config with enforced HTTPS for a subdomain, and generate cert with certbot let's encrypt</Typography>\n      <Typography>Please refer to these articles for details: <Link href='https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx'>Certbot official</Link> <Link href='https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04'>Digital Ocean</Link></Typography>\n      <Typography>First enter the subdomain, then enter port if you want this subdomain to proxy to a localhost server, or an absolute path if it is a static file hosting.</Typography>\n      <TextField label=\"Subdomain\" value={subdomain} onChange={({ target }) => setSubdomain(target.value)}/>\n      <TextField label=\"port or path\" value={portOrPath} onChange={({ target }) => setPortOrPath(target.value)}/>\n      <Typography>Next copy paste the below to <code>/etc/nginx/conf.d/{subdomain}.conf</code></Typography>\n      <pre>\n        <code>\n          {template(subdomain, portOrPath)}\n        </code>\n      </pre>\n      <Typography>Next run <code>sudo systemctl reload nginx</code>. Finally run <code>certbot certonly -d {subdomain}</code></Typography>\n    </Container>\n  )\n}\n\nexport default NginxSslPage\n","import { Container, Link } from '@material-ui/core'\nimport { Link as RouterLink } from 'react-router-dom'\n\nconst HomePage = () => {\n  return (\n    <Container>\n      <ul>\n        <li>\n          <RouterLink to='peerjs' component={Link}>Peer Js testing playground</RouterLink>\n        </li>\n        <li>\n          <RouterLink to='Nginx-SSL' component={Link}>Nginx playground</RouterLink>\n        </li>\n      </ul>\n    </Container>\n  )\n}\n\nexport default HomePage\n","import React, { FunctionComponent, useState } from 'react'\nimport {\n  AppBar,\n  Box,\n  Button,\n  ButtonGroup,\n  createMuiTheme,\n  CssBaseline,\n  MuiThemeProvider,\n  Toolbar,\n  Typography,\n  useMediaQuery\n} from '@material-ui/core'\nimport { Brightness7 } from '@material-ui/icons'\nimport { HashRouter, Link, Route, Switch } from 'react-router-dom'\nimport PeerjsPage from './PeerjsPage'\nimport NginxSslPage from './NginxSslPage'\nimport HomePage from './HomePage'\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n})\n\nconst lightTheme = createMuiTheme({\n  palette: {\n    type: 'light'\n  }\n})\n\nconst App: FunctionComponent = () => {\n  const [isDarkMode, setIsDarkMode] = useState(useMediaQuery('(prefers-color-scheme: dark)'))\n  return (\n    <HashRouter>\n      <MuiThemeProvider theme={{ ...(isDarkMode ? darkTheme : lightTheme) }}>\n        <CssBaseline/>\n        <Box flexDirection=\"column\"\n             style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, display: 'flex' }}>\n          <AppBar position=\"static\">\n            <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Typography variant=\"h6\">\n                Dipsy's Toolbox\n              </Typography>\n              <ButtonGroup variant=\"text\" color=\"inherit\">\n                <Link to=\"/\" component={Button}>\n                  Home\n                </Link>\n                <Link to=\"/peerjs\" component={Button}>\n                  Peerjs\n                </Link>\n                <Link to=\"Nginx-SSL\" component={Button}>\n                  Nginx SSL\n                </Link>\n                <Button title=\"Light/Dark Mode\" onClick={() => setIsDarkMode(!isDarkMode)}>\n                  <Brightness7/>\n                </Button>\n              </ButtonGroup>\n            </Toolbar>\n          </AppBar>\n          <Switch>\n            <Route path=\"/peerjs\">\n              <PeerjsPage/>\n            </Route>\n            <Route path=\"/Nginx-SSL\">\n              <NginxSslPage/>\n            </Route>\n            <Route path=\"/\">\n              <HomePage/>\n            </Route>\n          </Switch>\n        </Box>\n      </MuiThemeProvider>\n    </HashRouter>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}